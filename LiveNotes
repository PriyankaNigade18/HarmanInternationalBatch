
API Testing Recordings 
============================
https://drive.google.com/drive/folders/1CnkhAG1XAqVndJ50DcvhGFEwF03fUZRH?usp=sharing



Selenium WebDriver 
========================
Selenium WebDriver it is an API for webui automation test
================================
Setup
=============
1.Using java project
========================
1.create java project
2.download jar file from selenium.dev site
3.add it to project
	right click on project-->build path--->configure build path
	-->libraries-->class path-->add external jar.

2.Using Maven
==================================
Maven is build/project management tool

1.POM.xml file
======================
Project object model 
this is configuration file for project
	1.dependency
	================
	library /executable file
	
	2.plugin
	============
	Maven project execution
	
Project structure
========================
<project>

<depedencies>

<dependency>
</dependency>

</depedencies>



</project>	
================================
Repository
================
1.Local Repository
=====================
/user/.m2 folder

2.Remote/Central repository
============================
mvnrepository.com

=====================================
TestCase1:Validation of google title- Google
-------------------------------------------
step1: launch application
step2: get the actual title
Step3: validate with expected title
step4: display the result as per validation
step5: close the browser

=====================================
Selenium Browser Commands
=================================
1.get()
2.getTitle()
3.getCurrentUrl()
4.getPageSource()
5.getWindowHandle()
6.getWindowHandles()
7.close(): close current open window
8.quit(): close all open windows by selenium

Selenium Navigation commands
==================================
Selenium supports Navigation interface

1.to(url)
==============
driver.navigate().to(url)

2.back()
=============
driver.navigate().back()

3.forward()
==============
driver.navigate().forward()

4.refresh()
===============
driver.navigate().refresh()

=====================================================
What is Webelement
=======================
In general Any ui element is Webelement
In selenium WebElement is an interface

1.Identify Webelement
2.Perform action 

How selenium identify any webelement?
=======================================
Selenium use locator to identify webelement

Locator is address of webelement
=================================
Selenium support 8 locators
=============
1.By id---Primary locator
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.By tagName

Dynamic locators
=================
7.By cssSelector
8.By xpath


By is class in selenium

1.Identification
=====================
1.findElement()
==================
- findElement() identify only single webelement
- return type is WebElement object
- if element not found this method return NoSuchElementException



2.findElements()
==================
- fincdElements() identify multiple elements
- return type List<WebElement>
- If element not found it will not throw any exception

=====================================
WebElement validation
=======================
1.isDisplayed()
2.isEnabled()
3.isSelected()


Action on WebElement
=====================
1.textbox,searchbox---->type---->sendKeys(data,Keys.ENTER)
2.button,link,checkbox,radiobutton---->click----->click()
to clear the text----->clear()

=========================================
By className
===============
class="btn btn-default btn-primary"
		c1       c2       c3
		
		InvalidSelectorException: Compound class names not permitted


=================================
Hyper link automation
======================
<a id="SignIn" href="login.html">Sign In</a>
<a> Link Text   </a>

1.By linkText()-full text
====================
driver.findElement(By.linkText("Sign In")).click();

2.By partialLinkText()- partial text
============================

driver.findElement(By.partialLinkText("In")).click();
=========================================
By tagName
===============
1.Number of input boxes
2.Number of images
3.Number of links

=================================================
Synchronization in Selenium
===============================
Time mapping between application and tool is synchronization

Selenium support two dynamic wait
===================================
1.Implicit 
================
- global wait 
- applicable to each element

driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

2.Explicit
=================
- It is applicable to single element as per there condition

	1.WebDriverWait class
	2.FluentWait class
=================================================
WebElement methods
======================
1.getText()
=================
- get the visible text of element
- getText() will help you to get inner html text also

2.getAttribute(attrubute name)
====================================
- returns value associate with that attribute

===============================================
Dynamic Locators
========================
1.By cssSelector
2.By xpath


cssSelector is locator
============================
using element attributes we can interact with those elements
- cssSelector is faster than xpath as it travel in only one direction
	parent--->child
- cssSelector directly interact with element by there attribute classname,id,attribute
- cssSelector doe not support any method
- cssSelector not support any axies 

1.tagname with id
=======================
Syntax:
============
tagname#id

<input id="input-email">

input#input-email
--------------------------------------------
2.tagname with attribute
========================
Syntax:
===============
tagname[attribute='value']

placeholder="E-Mail Address"

input[placeholder='E-Mail Address']

-----------------------------------------------------
3.tagname with classname
===========================
Syntax:
=============
tagname.classname

class="btn btn-primary"

input.btn.btn-primary

--------------------------------------------
4.tagname with id,classname,attribute
=====================================================
Syntax
===========
tagname#id.classname[attribute='value']


In Css parent tag to child we can travels
---------------------------------------------
<div class="form-group>
  <a href="https://tutorialsninja.com/demo/index.php?route=account/forgotten">Forgotten Password</a></div>
  
div.form-group>a
===============================================================
8.By xpath
=====================
What is xpath
====================
Xpath is path of webelement form any xml or html file
Xpath directly locate elements from DOM(document object model)
=========================================
Html Dom
=====================
<html>------root node
<head>
</head>

<body>

<input>
<a>-----------------------------element
<button>
</body>

===================================================
Types of xpath
=================
1.Absoulte xpath(full)
======================
-this xpath starts from root node
-starts with '/'

/html/body/div[2]/div/div/div/div[2]/div/form/div[1]/input

2.Relative xpath
====================
- starts from attributes of element
- starts with '//'

//*[@id="input-email"]

* - any tag

xpath syntax:
==============
//tagname[@attribute='value']

=============================================
Xpath with Operators
=========================
1.and
==============
Syntax
========
//tagname[@attribute1='value' and @attribute2='value']

2.or
=======
Syntax
========
//tagname[@attribute1='value' or @attribute2='value']

==================================
xpath indexing and position()
==================================
Syntax
=============
(xpath)[index]

(//input[@class='form-control'])[4]

syntax
===========
(xpath)[position()=index]

=======================================================
xpath Methods
================
1.text()
===============
use this for visible text
- text() never ignore any white space

Syntax
=============
//tagname[text()='text']


2.normalize-space()
========================
 this method identify element by its text and ignore white space also
 
Syntax
==============
//tagname[normalize-space()='text']


3.contains()- partial match
====================

Syntax
============
//tagname[contains(@attribute,'partial value')]

or

//tagname[contains(text(),'partial text')]



4.starts-with()-prefix value
======================

Syntax
============
//tagname[starts-with(@attribute,'prefix value')]

or

//tagname[starts-with(text(),'prefix text')]
==========================================================
xpath Axies
===================
<tbody>--------------------ancestor
<tr>------------------------parent
 
      <td>4</td>------------preceding sibling

      <td>John</td>---------------element

       <td>Robinson</td>-----------
								following siblings
       <td>jr5527</td>-----------------
 
      <td>
              <a href="user.html"><i class="icon-pencil"></i></a>
              <a role="button" href="#myModal" data-toggle="modal"><i class="icon-remove"></i></a>
          </td>

  </tr>




1.ancestor
=============
Syntax:
==============
//tagname[@attribute1='value']//ancestor::tagname of ancestor ele

2.parent
================
Syntax:
==============
//tagname[@attribute1='value']//parent::tagname of parent ele

3.child
===============
Syntax:
==============
//tagname[@attribute1='value']//child::tagname of child ele

4.following
=====================
Syntax:
==============
//tagname[@attribute1='value']//following::tagname of following ele

//td[text()='John']//following::td............all after nodes


5.preceding
==============
Syntax:
==============
//tagname[@attribute1='value']//preceding::tagname of preceding ele

//td[text()='John']//preceding::td----------------all previous node

6.following-sibling
====================
Syntax:
==============
//tagname[@attribute1='value']//following-sibling::tagname of following-sibling ele

//td[text()='John']//following-sibling::td------only following sibling

7.preceding-sibling
=========================
Syntax:
==============
//tagname[@attribute1='value']//preceding-sibling::tagname of preceding ele
//td[text()='John']//preceding-sibling::td------------only preceding sibling
=============================================================
TestNG framework
=======================

1.Dropdown Automation
===========================
1.select tag based 
========================
Selenium Support Select class

Is dropdown support multiple selection
------------------------
isMultiple():boolean

Single option selection
---------------------------
1.selectByVisibleText()
2.selectByIndex()
3.selectByValue()

To get all options
--------------------------
getOptions()
=======================================

2.bootstrap/javascript
=============================
Using Locators
===============================================================

Multiple Window Handling
==============================
1.getWindowHandle()- Current window handle(sessionId)
2.getWindowHandles()- all windows handles(sessionId)
3.switchTo().Window(name/id)
=========================================
Alert
==========
Selenium provides Alert interface

1.to switch to alert
--------------------
driver.switchTo().alert();

Ok===>accept()
Cancle===>dismiss()
to get the text of alert====>getText()
to enter data to alert(prompt alert)====>sendKeys()


how to handle authentication popup
======================================

https://username:password@domain.com

https://admin:admin@the-internet.herokuapp.com/basic_auth
=================================================================
frame
=============
html document embedded into another html document is frame
<frame>
<iframe>

1.index
---------------
driver.switchTo().frame(index)

2.id/name
---------------
driver.switchTo().frame(id/name)

3.webElement
------------------
driver.switchTo().frame(webElement)


to switch to main document
===========================
driver.switchTo().defaultContent()

============================================================
Mouse operation
=====================
Selenium support Actions class

===============================================================
Explicit Wait
======================
1.WebDriverWait (c)
2.FluentWait (c)

WebDriverWait(c) extends FluentWait(c)implements Wait(I)
=================================================
JavaSriptExecutor
========================
1.scroll
2.get the title
3.click on element
4.refresh

TestNG Framework
====================
1.priority for sequencing

2.How to disable any test case from execution
--------------------------------------
1.using enabled argument -->enabled=false
2.using xml file 
	you can exclude test case/method
--------------------------------------------	
Assertion
===============
Assertion will help you to test current status of application

Assert class
==============
1.assertEquals(true,true)
2.assertTrue(true)
3.assertFalse(false)--pass

3.dependsOnMethod
=================

Annotations
===================
done


PageObjectModel
====================
Page Object model is design pattern which helps to maintain test
and avoid code duplication

1.Using By locator
2.Using PageFactory
====================
PageFactory is a class in selenium

@FindBy(locator="value")WebElement ele;

PageFactory.initElements(driver,current class object)

===============================================================
How to read data from file
=============================
1.using XMl file- @Parameters
2.using PropertiesFile

Data driven Framework
==============================
1.Using Array 
2.Using Excel File

====================================================
FrameworkDesign
=====================
Design phase
================
1.Page Object Model
2.Test Cases
3.BaseClass
4.Configuration file-Properties file
5.TestData---Excel file

Execution
-----------
1.Using xml file
2.Using Maven Project
3.Using jenkins
4.Using GitHub--->Jenkins

Reports
============
1.TestNG Reports
2.ExtentReport+Listener
3.Allure Report

Screenshots

==============================
21-10-2024
===================
1.Framework Design
2.Reports
3.Execution ways
Distributed version control system + Jenkins
4.cucumber framework


1.Using pom.xml
=====================

Maven Goals
=================
1.clean: delete all files from target folder of maven
2.test: test the project
3.install: install package + test

Plugins
=========
1.compiler plugins
=======================
https://maven.apache.org/plugins/maven-compiler-plugin/examples/compile-using-different-jdk.html
2.surefire plugins
=====================
https://maven.apache.org/surefire/maven-surefire-plugin/examples/testng.html


2.Using CLI
==================
1.download maven
2.set path into environment


3.Jenkins




































































































































































































